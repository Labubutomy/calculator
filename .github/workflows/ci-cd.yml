name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME_SERVER: ${{ github.repository }}/server
  IMAGE_NAME_CLIENT: ${{ github.repository }}/client

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.20'

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '23.11.0'
        cache: 'npm'
        cache-dependency-path: client/package-lock.json

    - name: Set up npm version
      working-directory: ./client
      run: npm install -g npm@11.6.0

    - name: Install Go dependencies
      working-directory: ./server
      run: go mod download

    - name: Run Go tests
      working-directory: ./server
      run: go test -v ./...

    - name: Install Node dependencies
      working-directory: ./client
      run: npm ci

    - name: Build React app
      working-directory: ./client
      run: npm run build

  build-and-push:
    name: Build and Push Docker Images
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata for server
      id: meta-server
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_SERVER }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-

    - name: Extract metadata for client
      id: meta-client
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_CLIENT }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-

    - name: Build and push server image
      uses: docker/build-push-action@v5
      with:
        context: ./server
        push: true
        tags: ${{ steps.meta-server.outputs.tags }}
        labels: ${{ steps.meta-server.outputs.labels }}

    - name: Build and push client image
      uses: docker/build-push-action@v5
      with:
        context: ./client
        push: true
        tags: ${{ steps.meta-client.outputs.tags }}
        labels: ${{ steps.meta-client.outputs.labels }}

  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Deploy notification
      run: |
        echo "ðŸš€ Deployment started for commit ${{ github.sha }}"
        echo "ðŸ“¦ Server image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_SERVER }}:main-${{ github.sha }}"
        echo "ðŸ“¦ Client image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_CLIENT }}:main-${{ github.sha }}"

    # - name: Deploy to VPS
    #   uses: appleboy/ssh-action@v1.0.3
    #   with:
    #     host: ${{ secrets.VPS_HOST }}
    #     username: ${{ secrets.VPS_USER }}
    #     key: ${{ secrets.VPS_SSH_KEY }}
    #     script: |
    #       echo ${{ secrets.GITHUB_TOKEN }} | docker login ghcr.io -u ${{ github.actor }} --password-stdin
          
    #       export GITHUB_REPOSITORY=${{ github.repository }}
    #       export IMAGE_TAG=main-${{ github.sha }}
          
    #       cd /opt/someproject-demo
          
    #       git pull origin main
          
    #       ./deploy.sh
          
    # - name: Health Check
    #   uses: appleboy/ssh-action@v1.0.3
    #   with:
    #     host: ${{ secrets.VPS_HOST }}
    #     username: ${{ secrets.VPS_USER }}
    #     key: ${{ secrets.VPS_SSH_KEY }}
    #     script: |
    #       sleep 15
    #       curl -f http://localhost:8080/health || exit 1
    #       echo "âœ… Deployment successful!"
